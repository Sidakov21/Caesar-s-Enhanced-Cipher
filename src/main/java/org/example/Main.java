package org.example;

import java.io.*;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;


public class Main {

    //–®–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞. –†–∞–±–æ—Ç–∞ —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.
    public static void CommonEncryption(File originalFile, File encryptedFile, int key) throws IOException {
        try (BufferedReader fin = new BufferedReader(new FileReader(originalFile));
             BufferedWriter fout = new BufferedWriter(new FileWriter(encryptedFile))) {

            int line;
            while ((line = fin.read()) != -1) {
                fout.write((char)line + key);
            }
            System.out.println("Encryption successful!");
        }
    }



    //–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–∞
    public static void CommonDecryption(File encryptedFile, File originalFile, int key) throws IOException {
        try (BufferedReader fin = new BufferedReader(new FileReader(encryptedFile));
             BufferedWriter fout = new BufferedWriter(new FileWriter(originalFile))) {

            int line;
            while ((line = fin.read()) != -1) {
                fout.write((char)line - key);
            }

            System.out.println("Decryption successful!");
        } // –ü–æ—Ç–æ–∫–∏ –∑–∞–∫—Ä–æ—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è try-with-resources
    }



    //–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é brute force (–ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
    public static void BruteForceDecryption(File encryptedFile, File outputDirectory) throws IOException {

        // –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        File resultFile = new File(outputDirectory, "all_decrypted_variants.txt");

        String bestDecryption = ""; // –°–æ—Ö—Ä–∞–Ω–∏–º –ª—É—á—à–∏–π —Ç–µ–∫—Å—Ç
        int bestKey = -1;           // –°–æ—Ö—Ä–∞–Ω–∏–º –ª—É—á—à–∏–π –∫–ª—é—á
        int maxSpaceCount = 0;      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ

        try (BufferedReader fin = new BufferedReader(new FileReader(encryptedFile));
             BufferedWriter fout = new BufferedWriter(new FileWriter(resultFile))) {

            // –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π
            for (int key = 0; key <= 33; key++) {
                fout.write("=== Key " + key + " ===\n");  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º –∫–ª—é—á–∞

                fin.mark(500000); // –°—Ç–∞–≤–∏–º –º–µ—Ç–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É —Ñ–∞–π–ª–∞

                StringBuilder decryptedText = new StringBuilder();
                int spaceCount = 0;

                int line;
                while ((line = fin.read()) != -1) {
                    char decryptedChar = (char) (line - key);
                    decryptedText.append(decryptedChar);
                    fout.write(decryptedChar);

                    // –ü–æ–¥—Å—á—ë—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
                    if (decryptedChar == ' ') {
                        spaceCount++;
                    }
                }

                fout.write("\n\n"); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                fin.reset();        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Å–∞–º—ã–º –≤–µ—Ä–æ—è—Ç–Ω—ã–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º
                if (spaceCount > maxSpaceCount) {
                    maxSpaceCount = spaceCount;
                    bestDecryption = decryptedText.toString();
                    bestKey = key;
                }
            }

            System.out.println("‚úÖ –ù—É–∂–Ω—ã–π –∫–ª—é—á: Key " + bestKey);
            System.out.println("üìù –¢–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π:\n" + bestDecryption);
        }
    }



    // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
    public static void StatisticalDecryption(File encryptedFile, File decryptedFile) throws IOException {
        String encryptedText = new String(Files.readAllBytes(encryptedFile.toPath()));
        Map<Character, Double> expectedFreq = getExpectedFrequencies(); // –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã

        int bestKey = 0;
        double minScore = Double.MAX_VALUE;

        // –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π (0-33)
        for (int key = 0; key <= 33; key++) {
            String decrypted = decrypt(encryptedText, key); // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
            Map<Character, Double> observedFreq = calculateFrequencies(decrypted); // –ß–∞—Å—Ç–æ—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ

            double score = calculateDeviation(expectedFreq, observedFreq); // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            if (score < minScore) {
                minScore = score;
                bestKey = key;
            }
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        String result = decrypt(encryptedText, bestKey);
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(decryptedFile))) {
            writer.write(result);
        }
        System.out.println("Best key: " + bestKey);
    }

    private static Map<Character, Double> getExpectedFrequencies() {
        Map<Character, Double> freq = new HashMap<>();
        // –ß–∞—Å—Ç–æ—Ç—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        freq.put('–æ', 0.1097);
        freq.put('–µ', 0.0845);
        freq.put('–∞', 0.0801);
        freq.put('–∏', 0.0735);
        freq.put('–Ω', 0.0670);
        freq.put('—Ç', 0.0626);

        return freq;
    }

    private static String decrypt(String text, int key) {
        StringBuilder sb = new StringBuilder();
        for (char c : text.toCharArray()) {
            sb.append((char) (c - key));
        }
        return sb.toString();
    }

    // –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    private static Map<Character, Double> calculateFrequencies(String text) {
        Map<Character, Integer> counts = new HashMap<>();
        int totalLetters = 0;

        for (char c : text.toCharArray()) {
            if (Character.isLetter(c)) {
                char lowerC = Character.toLowerCase(c);
                counts.put(lowerC, counts.getOrDefault(lowerC, 0) + 1);
                totalLetters++;
            }
        }

        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç
        Map<Character, Double> frequencies = new HashMap<>();
        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {
            frequencies.put(entry.getKey(), entry.getValue() / (double) totalLetters);
        }
        return frequencies;
    }

    private static double calculateDeviation(Map<Character, Double> expected, Map<Character, Double> observed) {
        double score = 0;
        for (Character c : expected.keySet()) {
            double exp = expected.getOrDefault(c, 0.0);
            double obs = observed.getOrDefault(c, 0.0);
            score += Math.pow(exp - obs, 2); // –°—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        }
        return score;
    }



//    public static void main(String[] args) {
////          File originalFile = new File("C:\\Users\\–ê–º–∏—Ä\\IdeaProjects\\CesarCipher\\untitled\\File examples\\TestFile.txt");
////          File encryptedFile = new File("C:\\Users\\–ê–º–∏—Ä\\IdeaProjects\\CesarCipher\\untitled\\File examples\\encryptedFile.txt");
//
////        File encryptedFile = new File("C:\\Users\\–ê–º–∏—Ä\\IdeaProjects\\CesarCipher\\untitled\\File examples\\encryptedFile.txt");
////        File outputDirectory = new File("C:\\Users\\–ê–º–∏—Ä\\IdeaProjects\\CesarCipher\\untitled\\File examples\\BruteForse");
//
////        File encryptedFile = new File("C:\\Users\\–ê–º–∏—Ä\\IdeaProjects\\CesarCipher\\untitled\\File examples\\encryptedFile.txt");
////        File statisticalFile = new File("C:\\Users\\–ê–º–∏—Ä\\IdeaProjects\\CesarCipher\\untitled\\File examples\\StatisticalDecrypt\\statistical_decrypt.txt");
//
////        int key = 3;
//
////        try {
//////            CommonEncryption(originalFile, encryptedFile, key);
//////            CommonDecryption(encryptedFile, originalFile, key);
//////            BruteForceDecryption(encryptedFile, outputDirectory);
//////            StatisticalDecryption(encryptedFile, statisticalFile);
////        } catch (IOException e) {
////            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: " + e.getMessage());
////        }
//    }
}