//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.

import java.io.*;
import java.nio.file.Files;


public class Main {

    public static void CommonEncryption(File originalFile, File encryptedFile, int key) throws IOException {
        try (BufferedReader fin = new BufferedReader(new FileReader(originalFile));
             BufferedWriter fout = new BufferedWriter(new FileWriter(encryptedFile))) {

            int line;
            while ((line = fin.read()) != -1) {
                fout.write((char)line + key);
            }
            System.out.println("Encryption successful!");
        }
    }

    //–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–∞
    public static void CommonDecryption(File encryptedFile, File originalFile, int key) throws IOException {
        try (BufferedReader fin = new BufferedReader(new FileReader(encryptedFile));
             BufferedWriter fout = new BufferedWriter(new FileWriter(originalFile))) {

            int line;
            while ((line = fin.read()) != -1) {
                fout.write((char)line - key);
            }

            System.out.println("Decryption successful!");
        } // –ü–æ—Ç–æ–∫–∏ –∑–∞–∫—Ä–æ—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è try-with-resources
    }

    //–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é brute force (–ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
    public static void BruteForceDecryption(File encryptedFile, File outputDirectory) throws IOException {

        // –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        File resultFile = new File(outputDirectory, "all_decrypted_variants.txt");

        String bestDecryption = ""; // –°–æ—Ö—Ä–∞–Ω–∏–º –ª—É—á—à–∏–π —Ç–µ–∫—Å—Ç
        int bestKey = -1;           // –°–æ—Ö—Ä–∞–Ω–∏–º –ª—É—á—à–∏–π –∫–ª—é—á
        int maxSpaceCount = 0;      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ

        try (BufferedReader fin = new BufferedReader(new FileReader(encryptedFile));
             BufferedWriter fout = new BufferedWriter(new FileWriter(resultFile))) {

            // –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π
            for (int key = 0; key <= 255; key++) {
                fout.write("=== Key " + key + " ===\n");  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º –∫–ª—é—á–∞

                fin.mark(500000); // –°—Ç–∞–≤–∏–º –º–µ—Ç–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É —Ñ–∞–π–ª–∞

                StringBuilder decryptedText = new StringBuilder();
                int spaceCount = 0;

                int line;
                while ((line = fin.read()) != -1) {
                    char decryptedChar = (char) (line - key);
                    decryptedText.append(decryptedChar);
                    fout.write(decryptedChar);

                    // –ü–æ–¥—Å—á—ë—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
                    if (decryptedChar == ' ') {
                        spaceCount++;
                    }
                }

                fout.write("\n\n"); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                fin.reset();        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Å–∞–º—ã–º –≤–µ—Ä–æ—è—Ç–Ω—ã–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º
                if (spaceCount > maxSpaceCount) {
                    maxSpaceCount = spaceCount;
                    bestDecryption = decryptedText.toString();
                    bestKey = key;
                }
            }

            System.out.println("‚úÖ –ù—É–∂–Ω—ã–π –∫–ª—é—á: Key " + bestKey);
            System.out.println("üìù –¢–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π:\n" + bestDecryption);
        }

    }

    public static void main(String[] args) {
          File originalFile = new File("C:\\Users\\–ê–º–∏—Ä\\IdeaProjects\\CesarCipher\\src\\TestFile.txt");
//        File encryptedFile = new File("C:\\Users\\–ê–º–∏—Ä\\IdeaProjects\\CesarCipher\\src\\enctyptedFile.txt");

        File encryptedFile = new File("C:\\Users\\–ê–º–∏—Ä\\IdeaProjects\\CesarCipher\\src\\enctyptedFile.txt");
        File outputDirectory = new File("C:\\Users\\–ê–º–∏—Ä\\IdeaProjects\\CesarCipher\\src\\BruteForse");

        int key = 7;

        try {
//            CommonEncryption(originalFile, encryptedFile, key);
//            CommonDecryption(encryptedFile, originalFile, key);
            BruteForceDecryption(encryptedFile, outputDirectory);
        } catch (IOException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }
}